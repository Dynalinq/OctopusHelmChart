octopus:
  statefulSet:
    annotations: {}
    labels: {}
  pods:
    annotations: {}
    labels: {}
  # The Octopus server image. Visit https://hub.docker.com/r/octopusdeploy/octopusdeploy for the available versions.
  image: octopusdeploy/octopusdeploy-prerelease:2020.3.0-beta1789.linux
  # Set this to 1 if you do not have a HA license.
  replicaCount: 2
  # The Octopus admin username
  username: admin
  # The Octopus admin password
  password: Password01!
  # The Octopus admin email
  email: admin@example.org
  # The built in worker can use execution containers to run steps inside special Docker images.
  # https://octopus.com/docs/deployment-process/execution-containers-for-workers.
  # This requires supporting Docker in Docker, which in turn means the Octopus image must be run with
  # all privileges. Disabling this setting disabled DOcker-In-Docker and does not set the privileged mode.
  enableDockerInDocker: true
  # Change this, as it is used to encrypt secrets
  masterKey: 6EdU6IWsCtMEwk0kPKflQQ==
  # Must be set to "Y" (including the quotes) to accept the EULA at https://octopus.com/legal/customer-agreement
  acceptEula: "N"
  # Use the MS SQL server defined below.
  # Note the hostname of the mssql server is <Release Name>-mssql-linux. This default value assumes a release name of "octopus".
  # This value must be changed to match a different release name.
  # See https://github.com/helm/helm/issues/2492 for why we can't use a dynamic release name in this value.
  connectionString: Server=octopus-mssql-linux,1433;Database=Octopus;User Id=SA;Password=Password01!
  # The base 64 encoded copy of the Octopus license. This needs to be a HA license if replicaCount is greater than 1.
  licenseKeyBase64:
  # An optional persistent volume claim class name for the Octopus server volumes. This storage class must support ReadWriteMany access modes.
  # Azure AKS uses azurefile for this ReadWriteMany volumes.
  # Google uses Filestore: https://cloud.google.com/filestore/docs/accessing-fileshares
  # Amazon uses EFS: https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html
  storageClassName:
  # A HA cluster required shared access to the volumes between Octopus nodes, which means the volumes must support an access mode of ReadWriteMany.
  # If replicaCount is 1 though, this value can be set to ReadWriteOnce.
  storageAccessMode: ReadWriteMany
  # The size of the repository volume
  repositoryVolumeSize: 1Gi
  # The size of the artifact volume
  artifactVolumeSize: 1Gi
  # The size of the task log volume
  taskVolumeSize: 1Gi
  # The port to access the web interface
  webPort: 80
  # The port to access the polling tentacles on
  tentaclePort: 10943
  # Settings concerning polling tentacles across the HA nodes
  pollingTenatcles:
    # If true, a load balancer is created for each Octopus instance for polling tentacles to point to.
    # Note that if replicaCount is 1, the load balancer exposing the web interface also exposes port 10943
    # to allow tentacles to connect to the single instance, and this setting should be set to false.
    exposeLoadBalancers: true

dockerHub:
  # Set to true to create a secret containing the docker registry password
  login: false
  # The base 64 encoded Docker config.json file. This value can be created with the command:
  # kubectl create secret docker-registry regcred --docker-username=myusername --docker-password=mypassword --dry-run=client -o yaml
  creds:

# The MS SQL subchart values. See https://github.com/helm/charts/tree/master/stable/mssql-linux for more details.
mssql-linux:
  # If enabled, a simple MS SQL server will be deployed. Note that this server is not production ready, as it
  # uses ephemeral storage. A ClusterIP service with the hostname of mssql is also created.
  enabled: true
  # Set the SA password, used by the octopus.connectionString value
  sapassword: Password01!
  # Must be set to "Y" to accept the EULA
  acceptEula:
    value: "N"